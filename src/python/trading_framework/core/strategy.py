"""Base classes and interfaces for trading strategies."""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, List, Optional

import pandas as pd


@dataclass
class Signal:
    """Represents a trading signal generated by a strategy."""
    
    timestamp: pd.Timestamp
    action: str  # 'BUY', 'SELL', 'HOLD'
    quantity: float
    price: Optional[float] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self) -> None:
        """Validate signal data."""
        if self.action not in ['BUY', 'SELL', 'HOLD']:
            raise ValueError(f"Invalid action: {self.action}")
        if self.quantity < 0:
            raise ValueError(f"Quantity must be non-negative: {self.quantity}")


class Strategy(ABC):
    """Abstract base class for trading strategies."""
    
    def __init__(self, name: str) -> None:
        """Initialize strategy with a name and parameters dict."""
        self.name = name
        self._parameters: Dict[str, Any] = {}
        self._required_columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
    
    @abstractmethod
    def calculate_signals(self, market_data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals from market data.
        
        Args:
            market_data: DataFrame with OHLCV data and timestamp index
            
        Returns:
            DataFrame with columns: timestamp, signal, position
            - signal: 1 (long), -1 (short), 0 (neutral)
            - position: change in position (1 for buy, -1 for sell, 0 for hold)
        """
        pass
    
    @abstractmethod
    def get_required_columns(self) -> List[str]:
        """Return list of required market data columns."""
        pass
    
    def validate_data(self, market_data: pd.DataFrame) -> None:
        """Validate that market data contains required columns."""
        required = set(self.get_required_columns())
        available = set(market_data.columns)
        missing = required - available
        
        if missing:
            raise ValueError(f"Missing required columns: {missing}")
    
    def get_parameters(self) -> Dict[str, Any]:
        """Return current strategy parameters."""
        return self._parameters.copy()
    
    def set_parameters(self, **kwargs: Any) -> None:
        """Update strategy parameters."""
        self._parameters.update(kwargs)
    
    def __repr__(self) -> str:
        """String representation of strategy."""
        params = ", ".join(f"{k}={v}" for k, v in self._parameters.items())
        return f"{self.__class__.__name__}({params})"